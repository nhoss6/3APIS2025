import { createServer } from "http";
import { Server } from "socket.io";
import jwt from "jsonwebtoken";
import app from "../app.js";
import dotenv from "dotenv";

dotenv.config();

// CrÃ©ation du serveur HTTP + Socket.IO
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;

// --- WebSocket Logic ---
io.on("connection", (socket) => {
  console.log("ðŸŸ¢ User connected:", socket.id);

  // Ã‰tape 1 : Authentification avec le JWT
  socket.on("authenticate", async (token) => {
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      socket.user = { id: decoded.id, username: decoded.username };
      socket.emit("authenticated");
      console.log(`SUCCESS Authenticated as: ${decoded.username}`);
    } catch (err) {
      console.log("FAILED Invalid token:", err.message);
      socket.emit("error", "Invalid token");
    }
  });

  // Ã‰tape 2 : Rejoindre une room privÃ©e entre deux utilisateurs
  socket.on("joinPrivateChat", ({ receiverId }) => {
    if (!socket.user) return;

    const roomId = [socket.user.username, receiverId].sort().join("_");
    socket.join(roomId);

    console.log(`ðŸ‘¥ ${socket.user.username} joined room: ${roomId}`);
    io.to(roomId).emit("systemMessage", `${socket.user.username} a rejoint le chat`);
  });

  // Ã‰tape 3 : Envoi dâ€™un message privÃ©
  socket.on("privateMessage", ({ receiverId, content }) => {
    if (!socket.user) return;

    const roomId = [socket.user.username, receiverId].sort().join("_");
    const message = {
      senderId: socket.user.username,
      content,
      time: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
    };

    console.log(`ðŸ’¬ Message from ${socket.user.username} to ${receiverId}: ${content}`);
    io.to(roomId).emit("newPrivateMessage", message);
  });

  // Ã‰tape 4 : DÃ©connexion dâ€™un utilisateur
  socket.on("disconnect", () => {
    if (socket.user) {
      io.emit("systemMessage", `${socket.user.username} a quittÃ© le chat`);
      console.log(`ðŸ”´ ${socket.user.username} disconnected (${socket.id})`);
    } else {
      console.log("ðŸ”´ Anonymous user disconnected:", socket.id);
    }
  });
});

// --- Lancement du serveur ---
server.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
});

export default server;
